package main

import (
	"container/heap"
	"fmt"
)

type Edge struct {
	To     int
	Weight int
}

type Graph struct {
	Edges [][]Edge
}

func NewGraph(size int) *Graph {
	return &Graph{
		Edges: make([][]Edge, size),
	}
}

func (g *Graph) AddEdge(from, to, weight int) {
	g.Edges[from] = append(g.Edges[from], Edge{To: to, Weight: weight})
}

type Item struct {
	node   int
	weight int
	index  int
}

type PriorityQueue []*Item

func (pq PriorityQueue) Len() int { return len(pq) }

func (pq PriorityQueue) Less(i, j int) bool {
	return pq[i].weight < pq[j].weight
}

func (pq PriorityQueue) Swap(i, j int) {
	pq[i], pq[j] = pq[j], pq[i]
	pq[i].index = i
	pq[j].index = j
}

func (pq *PriorityQueue) Push(x interface{}) {
	n := len(*pq)
	item := x.(*Item)
	item.index = n
	*pq = append(*pq, item)
}

func (pq *PriorityQueue) Pop() interface{} {
	old := *pq
	n := len(old)
	item := old[n-1]
	old[n-1] = nil
	item.index = -1
	*pq = old[0 : n-1]
	return item
}

func dijkstra(graph *Graph, start, end int) (int, []int) {
	pq := make(PriorityQueue, 0, len(graph.Edges))
	heap.Init(&pq)

	dist := make([]int, len(graph.Edges))
	prev := make([]int, len(graph.Edges))

	for i := range dist {
		dist[i] = 1<<63 - 1
		prev[i] = -1
	}
	dist[start] = 0

	heap.Push(&pq, &Item{node: start, weight: 0})

	for pq.Len() > 0 {
		u := heap.Pop(&pq).(*Item).node
		if u == end {
			break
		}

		for _, edge := range graph.Edges[u] {
			v := edge.To
			weight := edge.Weight

			alt := dist[u] + weight
			if alt < dist[v] {
				dist[v] = alt
				prev[v] = u
				heap.Push(&pq, &Item{node: v, weight: alt})
			}
		}
	}

	if prev[end] == -1 {
		return -1, nil
	}

	path := make([]int, 0)
	for u := end; u != -1; u = prev[u] {
		path = append([]int{u}, path...)
	}

	return dist[end], path
}

func main() {
	graph := NewGraph(6)
	graph.AddEdge(0, 1, 7)
	graph.AddEdge(0, 2, 9)
	graph.AddEdge(0, 5, 14)
	graph.AddEdge(1, 2, 10)
	graph.AddEdge(1, 3, 15)
	graph.AddEdge(2, 3, 11)
	graph.AddEdge(2, 5, 2)
	graph.AddEdge(3, 4, 6)
	graph.AddEdge(4, 5, 9)

	start, end := 0, 4
	distance, path := dijkstra(graph, start, end)

	fmt.Printf("Shortest path from %d to %d is: %v\n", start, end, path)
	fmt.Printf("The distance is: %d\n", distance)
}
